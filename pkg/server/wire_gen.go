// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/1340691923/ElasticView/pkg/api"
	"github.com/1340691923/ElasticView/pkg/infrastructure/access_control"
	"github.com/1340691923/ElasticView/pkg/infrastructure/config"
	"github.com/1340691923/ElasticView/pkg/infrastructure/dao"
	"github.com/1340691923/ElasticView/pkg/infrastructure/eve_api"
	"github.com/1340691923/ElasticView/pkg/infrastructure/jwt_svr"
	"github.com/1340691923/ElasticView/pkg/infrastructure/logger"
	"github.com/1340691923/ElasticView/pkg/infrastructure/middleware"
	"github.com/1340691923/ElasticView/pkg/infrastructure/plugin_rpc"
	"github.com/1340691923/ElasticView/pkg/infrastructure/plugins/manager"
	"github.com/1340691923/ElasticView/pkg/infrastructure/plugins/manager/process"
	"github.com/1340691923/ElasticView/pkg/infrastructure/pluginstore"
	"github.com/1340691923/ElasticView/pkg/infrastructure/request"
	"github.com/1340691923/ElasticView/pkg/infrastructure/response"
	"github.com/1340691923/ElasticView/pkg/infrastructure/sqlstore"
	"github.com/1340691923/ElasticView/pkg/infrastructure/sqlstore/migrator"
	"github.com/1340691923/ElasticView/pkg/infrastructure/web_engine"
	"github.com/1340691923/ElasticView/pkg/registry"
	"github.com/1340691923/ElasticView/pkg/server/backgroundsvcs"
	"github.com/1340691923/ElasticView/pkg/services/cache_service"
	"github.com/1340691923/ElasticView/pkg/services/es"
	"github.com/1340691923/ElasticView/pkg/services/es_link_service"
	"github.com/1340691923/ElasticView/pkg/services/es_service"
	"github.com/1340691923/ElasticView/pkg/services/eve_service"
	"github.com/1340691923/ElasticView/pkg/services/gm_operater_log"
	"github.com/1340691923/ElasticView/pkg/services/gm_role"
	"github.com/1340691923/ElasticView/pkg/services/gm_user"
	"github.com/1340691923/ElasticView/pkg/services/oauth"
	"github.com/1340691923/ElasticView/pkg/services/plugin_install_service"
	"github.com/1340691923/ElasticView/pkg/services/plugin_service"
	"github.com/1340691923/ElasticView/pkg/services/updatechecker"
	"github.com/1340691923/ElasticView/pkg/services/ws_service"
	"github.com/1340691923/ElasticView/pkg/web"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Initialize(args *config.CommandLineArgs) (*Server, error) {
	configConfig, err := config.InitConfig(args)
	if err != nil {
		return nil, err
	}
	v, err := logger.InitLog(configConfig)
	if err != nil {
		return nil, err
	}
	sqlStore, err := sqlstore.NewSqlStore(configConfig, v)
	if err != nil {
		return nil, err
	}
	rbac, err := access_control.NewRbac(configConfig, v, sqlStore)
	if err != nil {
		return nil, err
	}
	migratorMigrator := migrator.NewMigrator(sqlStore, configConfig, v, rbac)
	webEngine := web_engine.NewWebEngine()
	jwt := jwt_svr.NewJwt(configConfig, v)
	responseResponse := response.NewResponse(v)
	gmUserDao := dao.NewGmUserDao(sqlStore)
	gmRoleDao := dao.NewGmRoleDao(sqlStore)
	pluginManager := manager.NewPluginManager()
	workWechat := oauth.NewWorkWechat(configConfig)
	oAuthServiceRegistry := oauth.ProvideOAuthServiceRegistry(workWechat)
	gmUserService := gm_user.NewGmUserService(v, gmUserDao, gmRoleDao, jwt, pluginManager, configConfig, sqlStore, oAuthServiceRegistry)
	middleWareService := middleware.NewMiddleWareService(configConfig, sqlStore, v, jwt, responseResponse, gmUserService, rbac, webEngine, pluginManager)
	requestRequest := request.NewRequest()
	baseController := api.NewBaseController(requestRequest, responseResponse)
	gmOperaterLogService := gm_operater_log.NewGmOperaterLogService(v, sqlStore)
	gmOperaterController := api.NewGmOperaterController(baseController, v, configConfig, gmOperaterLogService)
	gmRoleService := gm_role.NewGmRoleService(v, gmRoleDao)
	esCache := cache_service.NewEsCache()
	esLinkV2Dao := dao.NewEsLinkV2Dao(sqlStore)
	esClientService := es.NewEsClientService(configConfig, esCache, esLinkV2Dao, gmUserDao, sqlStore)
	eslinkCfgV2Dao := dao.NewEslinkCfgV2Dao(sqlStore)
	gmRoleEslinkCfgV2Dao := dao.NewGmRoleEslinkCfgV2Dao(sqlStore)
	eslinkRoleCfgReletionDao := dao.NewEslinkRoleCfgReletion(sqlStore)
	esLinkService := es_link_service.NewEsLinkService(sqlStore, v, esClientService, eslinkCfgV2Dao, gmRoleEslinkCfgV2Dao, eslinkRoleCfgReletionDao, gmUserDao, esLinkV2Dao)
	managerRoleController := api.NewManagerRoleController(baseController, v, configConfig, jwt, gmRoleService, gmUserService, rbac, sqlStore, esLinkService)
	esLinkController := api.NewEsLinkController(baseController, v, esClientService, sqlStore, esLinkService, jwt, esCache)
	evEApi := eve_api.NewEvApi(configConfig, v)
	evBackDao := dao.NewEvBackDao(v, evEApi)
	evUpdate, err := updatechecker.ProvideEvUpdate(v, configConfig, evBackDao)
	if err != nil {
		return nil, err
	}
	managerUserController := api.NewManagerUserController(baseController, v, configConfig, sqlStore, jwt, gmUserService, webEngine, evUpdate, pluginManager)
	esService := es_service.NewEsService(sqlStore)
	esController := api.NewEsController(baseController, v, esClientService, esService, jwt, configConfig)
	heartController := ws_service.NewHeartController()
	wsService := ws_service.NewWsService(v, configConfig, sqlStore, jwt, heartController)
	wsController := api.NewWsController(v, configConfig, sqlStore, jwt, wsService)
	indexController := api.NewIndexController(configConfig)
	service := process.ProvideService(v)
	pluginService := plugin_service.NewPluginService(sqlStore, pluginManager, v, service, configConfig, rbac, gmUserDao, jwt, evBackDao)
	pluginsService, err := updatechecker.ProvidePluginsService(v, configConfig, evBackDao, pluginManager)
	if err != nil {
		return nil, err
	}
	evEService := eve_service.NewEvEService(v, evBackDao, configConfig, pluginManager, pluginsService)
	pluginStoreService := pluginstore.NewPluginStoreService(pluginManager, configConfig, service, v)
	pluginInstaller := plugin_install_service.ProvideInstaller(configConfig, v, pluginManager, evBackDao, pluginStoreService, pluginsService)
	pluginController := api.NewPluginController(baseController, v, sqlStore, pluginService, evEService, pluginInstaller)
	webServer := web.NewWebServer(webEngine, v, configConfig, rbac, middleWareService, gmOperaterController, managerRoleController, esLinkController, managerUserController, esController, wsController, indexController, pluginController)
	pluginUtilController := api.NewPluginUtilController(baseController, pluginService, esClientService, esService, v, configConfig)
	pluginRpcServer := plugin_rpc.NewPluginRpcServer(v, configConfig, middleWareService, pluginUtilController)
	backgroundServiceRegistry := backgroundsvcs.ProvideBackgroundServiceRegistry(webServer, evUpdate, pluginsService, pluginStoreService, pluginRpcServer, evEService)
	server := NewServer(configConfig, migratorMigrator, v, sqlStore, backgroundServiceRegistry, esLinkService, evEService, gmUserService)
	return server, nil
}

func InitializeOrm(args *config.CommandLineArgs) (*sqlstore.SqlStore, error) {
	configConfig, err := config.InitConfig(args)
	if err != nil {
		return nil, err
	}
	v, err := logger.InitLog(configConfig)
	if err != nil {
		return nil, err
	}
	sqlStore, err := sqlstore.NewSqlStore(configConfig, v)
	if err != nil {
		return nil, err
	}
	return sqlStore, nil
}

func InitializeEvApiDao(args *config.CommandLineArgs) (*dao.EvBackDao, error) {
	configConfig, err := config.InitConfig(args)
	if err != nil {
		return nil, err
	}
	v, err := logger.InitLog(configConfig)
	if err != nil {
		return nil, err
	}
	evEApi := eve_api.NewEvApi(configConfig, v)
	evBackDao := dao.NewEvBackDao(v, evEApi)
	return evBackDao, nil
}

func InitializeGmRoleEslinkCfgV2Dao(args *config.CommandLineArgs) (*dao.GmRoleEslinkCfgV2Dao, error) {
	configConfig, err := config.InitConfig(args)
	if err != nil {
		return nil, err
	}
	v, err := logger.InitLog(configConfig)
	if err != nil {
		return nil, err
	}
	sqlStore, err := sqlstore.NewSqlStore(configConfig, v)
	if err != nil {
		return nil, err
	}
	gmRoleEslinkCfgV2Dao := dao.NewGmRoleEslinkCfgV2Dao(sqlStore)
	return gmRoleEslinkCfgV2Dao, nil
}

func InitializeProvideInstaller(args *config.CommandLineArgs) (*plugin_install_service.PluginInstaller, error) {
	configConfig, err := config.InitConfig(args)
	if err != nil {
		return nil, err
	}
	v, err := logger.InitLog(configConfig)
	if err != nil {
		return nil, err
	}
	pluginManager := manager.NewPluginManager()
	evEApi := eve_api.NewEvApi(configConfig, v)
	evBackDao := dao.NewEvBackDao(v, evEApi)
	service := process.ProvideService(v)
	pluginStoreService := pluginstore.NewPluginStoreService(pluginManager, configConfig, service, v)
	pluginsService, err := updatechecker.ProvidePluginsService(v, configConfig, evBackDao, pluginManager)
	if err != nil {
		return nil, err
	}
	pluginInstaller := plugin_install_service.ProvideInstaller(configConfig, v, pluginManager, evBackDao, pluginStoreService, pluginsService)
	return pluginInstaller, nil
}

// wire.go:

var wireSet = wire.NewSet(wire.Bind(new(registry.BackgroundServiceRegistry), new(*backgroundsvcs.BackgroundServiceRegistry)), oauth.ProvideOAuthServiceRegistry, oauth.NewWorkWechat, plugin_install_service.ProvideInstaller, wire.Bind(new(manager.Service), new(*manager.PluginManager)), api.NewPluginController, process.ProvideService, migrator.NewMigrator, config.InitConfig, manager.NewPluginManager, pluginstore.NewPluginStoreService, eve_api.NewEvApi, eve_service.NewEvEService, dao.NewEvBackDao, logger.InitLog, dao.NewEslinkCfgV2Dao, dao.NewGmRoleDao, dao.NewGmUserDao, dao.NewEsLinkV2Dao, dao.NewGmRoleEslinkCfgV2Dao, dao.NewEslinkRoleCfgReletion, dao.NewGmOperaterLogDao, updatechecker.ProvidePluginsService, sqlstore.NewSqlStore, cache_service.NewEsCache, request.NewRequest, response.NewResponse, api.NewBaseController, ws_service.NewWsService, api.NewIndexController, updatechecker.ProvideEvUpdate, api.NewPluginUtilController, plugin_service.NewPluginService, api.NewEsController, api.NewEsLinkController, api.NewWsController, ws_service.NewHeartController, es.NewEsClientService, es_link_service.NewEsLinkService, es_service.NewEsService, api.NewGmOperaterController, gm_operater_log.NewGmOperaterLogService, api.NewManagerRoleController, gm_role.NewGmRoleService, api.NewManagerUserController, gm_user.NewGmUserService, jwt_svr.NewJwt, middleware.NewMiddleWareService, backgroundsvcs.ProvideBackgroundServiceRegistry, access_control.NewRbac, web_engine.NewWebEngine, web.NewWebServer, plugin_rpc.NewPluginRpcServer, NewServer)
