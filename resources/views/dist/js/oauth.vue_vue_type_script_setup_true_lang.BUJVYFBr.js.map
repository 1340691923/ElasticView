{"version":3,"file":"oauth.vue_vue_type_script_setup_true_lang.BUJVYFBr.js","sources":["../../../vue/src/views/permission/oauth.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-card shadow=\"never\" class=\"table-container\">\n      <el-tabs v-model=\"data.authType\" >\n      <el-tab-pane label=\"企业微信认证(内部应用)\" name=\"企业微信认证(内部应用)\">\n        <el-form label-width=\"100px\" label-position=\"left\">\n          <el-form-item label=\"开启认证:\" >\n            <el-switch\n              v-model=\"data.wecomeCfg.enable\"\n              active-text=\"开启\"\n              inactive-text=\"不开启\">\n            </el-switch>\n          </el-form-item>\n          <el-form-item label=\"回调域名:\" >\n            <el-input :placeholder=\"cbPlaceholder\" v-model=\"data.wecomeCfg.rootUrl\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"corpid:\" >\n            <el-input placeholder=\"企业 ID，在企业微信管理后台可查，用于识别调用接口的企业身份。类似于企业的唯一编号。\" v-model=\"data.wecomeCfg.corpid\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"agentId:\" >\n            <el-input placeholder=\"应用 ID，用于区分具体是哪个企业内部应用。\" v-model=\"data.wecomeCfg.agentId\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"secert:\" >\n            <el-input placeholder=\"自建应用凭证密钥，用于获取该应用的 access_token。每个应用有不同的 secret，在企业微信管理后台可以查看。\" type=\"password\" show-password  v-model=\"data.wecomeCfg.secert\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"\" >\n            <el-button @click=\"saveOAuthConfig({\n            application_name:data.authType,\n            config:data.wecomeCfg,\n            })\" type=\"primary\" >提交</el-button>\n          </el-form-item>\n        </el-form>\n\n      </el-tab-pane>\n\n    </el-tabs>\n    </el-card>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n\nimport {GetOAuthConfigs, SaveOAuthConfigs} from \"@/api/user\";\n\nconst data = reactive({\n  authType:'企业微信认证(内部应用)',\n  wecomeCfg:{\n    rootUrl:\"\",\n    agentId: \"\",\n    corpid: \"\",\n    enable: false,\n    secert: \"\"\n  }\n})\n\nconst cbPlaceholder = computed(()=>{\n  let href = window.location.href;\n  if(!import.meta.env.PROD){\n    href = import.meta.env.VITE_APP_API_URL\n  }\n  const protocol = href.split('//')[0] === 'http:' ? 'http' : 'https';\n  const host = href.split('//')[1].split('/')[0];\n  return `例如:${protocol}://${host}/`\n})\n\nconst saveOAuthConfig = async (data)=>{\n  const res= await SaveOAuthConfigs(data)\n  if(res.code != 0 ){\n    ElMessage.error({\n      message: res.msg,\n      type: 'error'\n    })\n    return\n  }\n  ElMessage.success({\n    message: res.msg,\n    type: 'success'\n  })\n}\n\nconst Init = async ()=>{\n  const res = await GetOAuthConfigs({})\n  if(res.code != 0 ){\n    ElMessage.error({\n      message: res.msg,\n      type: 'error'\n    })\n    return\n  }\n  data.wecomeCfg = res.data[\"企业微信认证(内部应用)\"]\n}\n\nonMounted(()=>{\n  Init()\n})\n\n</script>\n\n<style scoped>\n\n</style>\n"],"names":["data","reactive","authType","wecomeCfg","rootUrl","agentId","corpid","enable","secert","cbPlaceholder","computed","href","window","location","split","onMounted","async","res","GetOAuthConfigs","code","ElMessage","error","message","msg","type","SaveOAuthConfigs","success"],"mappings":"waA4CA,MAAMA,EAAOC,EAAS,CACpBC,SAAS,eACTC,UAAU,CACRC,QAAQ,GACRC,QAAS,GACTC,OAAQ,GACRC,QAAQ,EACRC,OAAQ,MAINC,EAAgBC,GAAS,KACzB,IAAAC,EAAOC,OAAOC,SAASF,KAMpB,MAAA,MAFkC,UAAxBA,EAAKG,MAAM,MAAM,GAAiB,OAAS,aAC/CH,EAAKG,MAAM,MAAM,GAAGA,MAAM,KAAK,KACb,WA8BjCC,GAAU,KAZGC,WACX,MAAMC,QAAYC,EAAgB,CAAA,GACnB,GAAZD,EAAIE,KAOFnB,EAAAG,UAAYc,EAAIjB,KAAK,gBANxBoB,EAAUC,MAAM,CACdC,QAASL,EAAIM,IACbC,KAAM,SAI8B,oiDAxBlBR,OAAOhB,IACvB,MAAAiB,QAAWQ,EAAiBzB,GACnB,GAAZiB,EAAIE,KAOPC,EAAUM,QAAQ,CAChBJ,QAASL,EAAIM,IACbC,KAAM,YARNJ,EAAUC,MAAM,CACdC,QAASL,EAAIM,IACbC,KAAM,SAOT"}